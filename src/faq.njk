---
permalink: "faq.html"
---
<h1>Frequently Asked Questions</h1>

<ul>
        <li><a href="#General">General</a></li>
        <li><a href="#Troubleshooting">Troubleshooting</a></li>
</ul>

<h2><a name="General">General</a></h2>
<h3>Why BSD instead of Linux?</h3>
<p>In theory, it will be easier to build Mac code on FreeBSD because it is closer to macOS than Linux is.
        FreeBSD's kernel also supports a foreign system call interface which should help make emulating Mach system
        calls easier, and eliminates the need to emulate BSD system calls like Darling (on Linux) does.
</p>
<p>Also, why not? Devils need love too!</p>

<h3>Why BSD instead of Darwin?</h3>
<p>The short answer is "hardware support". Airyx should run on most commodity x86_64 hardware using
        FreeBSD's very stable and performant drivers.
</p><p> The longer answer is that plus I don't see
        any real advantage to using xnu or building my own Mach/BSD combination kernel. Any Mach syscalls that we
        eventually might need can be emulated so the xnu approach just seems to add complexity and the effort
        of writing and maintaining drivers.
</p>
<p>Considering how big this project is already, I opted to stick with the BSD kernel - at least for now.</p>

<h3>Is this... legally sketchy?</h3>
<p>No. Consider projects like ReactOS, a from-scratch effort to create an OS compatible with Microsoft Windows,
        GNUstep, which provides an open implementation of Cocoa APIs and other things, or Darling, a Darwin (macOS)
        emulation on Linux. Airyx is similar and stands on the shoulders of many such projects.
</p>

<p>All code used is freely available under open source licenses. No proprietary elements like fonts, icons,
        trademarks, etc can be used. Original code must be written using "clean room" techniques - that is, from
        public documentation like developer guides by people who have never seen the proprietary code - and released
        under the FreeBSD license or the MIT license.
</p>

<h3>What programming languages does Airyx use?</h3>
<p>The goal is to use a small core set of languages as much as possible: the "C" family (C, C++,
        Objective-C, and Objective-C++), Swift, Python, Java, and shell scripts. This should cover most needs.
</p>

<h3>I can code in those! How can I help?</h3>
<p>Great! Take a look at the issues list to find something that interests you, or contact mszoek.</p>

<h3>I don't code but this looks awesome! Can I still help?</h3>
<p>Absolutely! There will be art, documentation, testing, UX and UI work, release management,
        project management, legal advice, and many other ways to contribute. This project is huge and
        help is very welcome. Check out the issues for ideas on how to contribute, or contact mszoek.
</p>

<h3>Can I support the project financially?</h3>
<p>You sure can! I've signed up for GitHub Sponsors to make monthly sponsorship easy. You can
        also make a contribution via <a href="https://paypal.me/thatzoek?locale.x=en_US">PayPal</a>.
</p>

<h3>Why aren't you working with project XXXX? Isn't this a duplication of effort?</h3>
<p>This one has been asked a lot so:</p>
<ul>
        <li>
                <p>
                        helloSystem: We <em>are</em> in fact working with helloSystem! As some people have noticed, Airyx 0.2.X was basically helloSystem. (That was the second PoC. The first had been built on vanilla FreeBSD and had no GUI at all.) Under the hood, however, Airyx 0.2.2 has a partial implementation of Cocoa, a modified compiler & linker that support frameworks, and several other additions that make it distinct. We have similar philosophies, and share technology and cooperate where it makes sense (e.g. Filer), but the project goals are quite different.
                </p>
                <p>
                        helloSystem wants to create a computer that is <a href="https://github.com/helloSystem/hello"> simple to use, open, elegant, small and fast</a>. Older MacOS X and Classic are an inspiration to what that might look like, but they are not explicitly trying to create an open-source Mac. In fact they're mostly avoiding Objective C and XML plists and other Mac technology in favor of simpler and/or more modern ways (e.g. Qt, C++, JSON).
                </p>

                <p>
                        Airyx is explicitly trying to be compatible with Mac software at a source and eventually a binary level, without losing support for FreeBSD/X11 software, and to implement a very similar experience on the desktop and at the command line. For example, on Airyx you would be able to type <code>open -a MyApp image.jpg</code> and have <code>image.jpg</code> open in <em>MyApp</em>. You will find things in (mostly) the same directories as a Mac, like <code>~/Library</code> or <code>/System/Library/Fonts</code>. Airyx is not as concerned about keeping the OS as small and simple as possible, and more concerned about making it clean, secure, performant, and compatible - implementing many of the features I use daily in macOS while skipping the lock-in and "tabletization" of the computer.
                </p>

                <p>Some of the more technical differences between Airyx and hello are:
                        <ul>
                                <li>Airyx uses a patched kernel and compiler suite that supports Frameworks and will eventually support Mach-O as well as ELF</li>
                                <li>Airyx has a package repo with software built to "standard" paths like <code>/System</code>, <code>/etc</code>, and <code>/usr</code> instead of the FreeBSD repos which are built into <code>/usr/local</code></li>
                                <li>Airyx desktop is based on KDE Plasma where hello's desktop is based on openbox, Menu and Filer (originally from LXQt) plus other lightweight services for notifications (dunst), screen color temperature (redshift) etc</li>
                                <li>helloSystem uses a simplified .app structure whereas Airyx uses real Bundles for .app</li>
                                <li>helloSystem tends to use typical Unix paths and files, while Airyx is moving towards typical Mac paths and files</li>
                                <li>Airyx tries to provide the same APIs as macOS</li>
                        </ul>
                </p>
        </li>
        <li>
                elementaryOS: Currently using some icons and themes and totally open to other possibilities. However, we are not aligned on our preferred stacks - GTK vs Qt/Cocoa - which makes it harder.
        </li>
        <li>
                PureDarwin: Airyx is not based on Darwin (see "Why not Darwin" above) but uses many of the same underlying pieces.
        </li>
        <li>
                Darling: Airyx is not based on Linux or Mach-O but uses many of the same underlying pieces. Darling's Cocoa implementation comes from the same source as Airyx's and I suspect we could share some code here. I'm definitely keeping an eye on Darling for binary compatibility down the road :)
        </li>
        <li>
                GNUStep: GNUStep is pretty good - not gonna lie. We use the libobjc2 runtime from it. However, the changes they've made to sit alongside Linux, the GS* extension classes, and various other things made it "less than ideal" for Airyx. Also I prefer BSD/MIT/Apache-style licensing.
        </li>
</ul>
<p>
        Notwithstanding the above, I'm open to collaboration with anyone who finds parts of Airyx useful or who has code they think might be useful to it.
</p>

<h3>This is a huge effort. Y'all must be crazy!</h3>
<p>
        Yes. <em>Here's to the crazy ones... because the people who are crazy enough to think they can change the world are the ones that do.</em>
</p>
<p>
        In all seriousness, though, it's not my first rodeo. I have no illusions about the scale of building an OS or how long projects like Haiku, ReactOS or GNUStep took to get usable. This is just something I like doing in my Copious Spare Time&trade; and that I hope will be useful someday.
</p>
<p>
        I've always liked Apple's design and elegance, but am not thrilled with the direction of recent macOS&reg; or how closed the hardware has become. And I'm a big believer in open source. So ... let's build something that feels as elegant, without all the lock-in, and maybe (just maybe) I can get it to a point that reasonably useful Mac apps build & run on it. And if not, we'll build a lot of cool pieces along the way and learn a ton. I'm OK with that.
</p>

<h2><a name="Troubleshooting">Troubleshooting</a></h2>
<h3>Why won't it start in VirtualBox?</h3>
<p>
        Airyx 0.2.2 may hang after booting the LiveCD with a black screen if you run in VirtualBox with the default VMSVGA driver. Changing to the VBoxSVGA driver for display may fix the issue. See <a href="https://github.com/mszoek/airyx/issues/74">issue #74</a> for details.
</p>
